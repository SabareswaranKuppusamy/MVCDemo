@model List<Book>


<div class="container p-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2>BOOK STORE</h2>
        <a asp-action="Create" class="btn btn-dark text-light custom-btn">
            <i class="bi bi-plus-lg"></i> Add New Book
        </a>
    </div>

    @* Alerts *@
    
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="bi bi-check-circle-fill"></i> @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="bi bi-exclamation-triangle-fill"></i> @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
    }


    <form method="get" class="mb-4" asp-action="Index">
        <div class="input-group">
            <span class="input-group-text"><i class="bi bi-search"></i></span>
            <input type="text" id="searchBox" class="form-control" placeholder="Search by Title or Author" />
        </div>
    </form>

    @* delete popup  *@ 
    <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">

        <div class="modal-dialog modal-dialog-centered"> 

            <div class="modal-content shadow-lg border-0 rounded-3">

                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title"><i class="bi"></i> Confirm Delete</h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                 
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong id="bookTitle"></strong> by <strong id="bookAuthor"></strong>?</p>
                </div>

                <div class="modal-footer">
                    <form id="deleteForm" method="post" asp-action="DeleteConfirmed">

                        <input type="hidden" name="id" id="deleteBookId" />

                        <button type="submit" class="btn btn-danger px-4">Delete</button>
                        <button type="button" class="btn btn-secondary px-4" data-bs-dismiss="modal">Cancel</button>
                    </form>
                </div>

            </div>
        </div>
    </div>

    <div class="table-responsive">
        <table class="table table-striped table-bordered align-middle">
            <thead class="table-dark ">
                <tr>
                    <th>Title</th>
                    <th>Author</th>
                    <th class="text-end">Price</th>
                    <th>Description</th>
                    <th style="width:150px">Actions</th>
                </tr>
            </thead>
            <tbody id="bookTable">
                @if (Model != null && Model.Count > 0)
                {
                    @foreach (var book in Model)
                    {
                        <tr>
                            <td data-field="title">@book.Title</td>
                            <td data-field="author">@book.Author</td>
                            <td class="text-end">@book.Price.ToString("0.00")</td>
                            <td data-field="description">@book.Description</td>
                            <td>
                                <a asp-action="Edit" class="btn btn-sm btn-warning" asp-route-id="@book.Id">
                                    <i class="bi bi-pencil"></i>
                                </a>

                                <a asp-action="Details"
                                   asp-route-id="@book.Id"
                                   class="btn btn-info btn-sm ms-2">
                                    <i class="bi bi-eye"></i>
                                </a>

                                <a href="javascript:void(0)"
                                   class="btn btn-sm btn-danger ms-2"
                                   data-bs-toggle="modal"
                                   data-bs-target="#deleteModal"
                                   data-id="@book.Id"
                                   data-title="@book.Title"
                                   data-author="@book.Author">
                                    <i class="bi bi-trash"></i>
                                </a>
                            </td>

                        </tr>
                    }
                }
                else
                {
                    <tr class="no-results">
                        <td colspan="5" class="text-center py-4">
                            No data available
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    @* Pagination *@
    <nav class="d-flex justify-content-end">
        <ul class="pagination custom-pagination" id="pagination">
        </ul>
    </nav>

</div>


@section Scripts
{    
    <script>

         // pagination

        const rowsPerPage = 5;
        let currentPage = 1;
        let filteredRows = [];

        function applyFilter()
        {

            // console.log(`apply fiter--->  `);
            debugger;

            const query = $("#searchBox").val().toLowerCase().trim();
            const $allRows = $("#bookTable tr");

            filteredRows = $allRows.filter( function()
            {
                const title = $(this).find("td[data-field = 'title']").text().toLowerCase();

                const author = $(this).find("td[data-field = 'author']").text().toLowerCase();

                return title.indexOf(query) > 1 || author.indexOf(query) > -1;
            });


            $("#bookTable tr.no-results").remove();

            if (filteredRows.length === 0) 
            {
                $allRows.hide();

                $("#bookTable").append('<tr class="no-results"><td colspan="5" class="text-center py-4">No results found</td></tr>');

                $("#pagination").empty();

                return false;
            }

            return true;
        }

        function applyPagination()
        {
            if(filteredRows.length === 0) 
            {
                return;
            }

            const totalPages = Math.ceil(filteredRows.length / rowsPerPage);

            if(currentPage < 1)
            {
                currentPage = 1;
            }

            if (currentPage > totalPages)
            {
                currentPage = totalPages;
            }

            $("#bookTable tr").hide();

            const start = (currentPage - 1) * rowsPerPage;
            const end = start + rowsPerPage;

            filteredRows.slice(start, end).show();

            const $pagination = $("#pagination").empty();

            if(currentPage > 1 )
            {
                $pagination.append(`
                        <li class="page-item">
                            <a class="page-link" href="javascript:void(0)" data-page="${currentPage - 1}">
                                &laquo;
                            </a>
                        </li>
                    `)
            }
            else 
            {
                $pagination.append(`
                        <li class="page-item disabled"> 
                            <span class="page-link"> &laquo; 
                            </span>
                        </li>
                    `);
            }

            $pagination.append(`
                <li class="page-item active">
                    <span class="page-link bg-dark text-white no-outline">
                        Page ${currentPage} of ${totalPages}
                    </span>
                </li>
            `);
            


            if(currentPage < totalPages )
            {
                $pagination.append(`
                        <li class="page-item">
                            <a class="page-link" href="javascript:void(0)" data-page="${ currentPage + 1}">
                                &raquo;
                            </a>
                        </li>
                    `)
            }
            else 
            {
                $pagination.append(`
                        <li class="page-item disabled">
                            <span class="page-link"> &raquo;
                            </span>
                        </li>
                    `);
            }



        }

        function changePage(page) 
        {
            console.log("pagination action  ");
            currentPage = page;
            applyPagination();
        }

        $(document).on("click", "#pagination a.page-link", function (e) 
        {
            console.log("pagination button click   ");

            e.preventDefault();

            const page = parseInt($(this).attr("data-page"));

            if (!isNaN(page)) 
            {
                changePage(page);
            }
        });
        // filter

        $("#searchBox").on("keyup", function () 
        {
             currentPage = 1;

            if (applyFilter()) 
            {
                applyPagination();
            }

        });

        // delete 

        var deleteModal = document.getElementById('deleteModal');

        deleteModal.addEventListener('show.bs.modal', function (event) 
        {
            var deleteButton = event.relatedTarget;

            var bookId = deleteButton.getAttribute('data-id');

            var bookTitle = deleteButton.getAttribute('data-title');

            var bookAuthor = deleteButton.getAttribute('data-author');

            document.getElementById('deleteBookId').value = bookId;

            document.getElementById('bookTitle').textContent = bookTitle;

            document.getElementById('bookAuthor').textContent = bookAuthor;
        });


        $(document).ready(function () 
        {
            if (applyFilter()) 
            {
                applyPagination();
            }
        });

    </script>
}